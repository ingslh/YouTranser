CMAKE_MINIMUM_REQUIRED(VERSION 3.0)

PROJECT(EyerLib VERSION 1.0.0.0)

MESSAGE( STATUS "CMAKE_PROJECT_NAME    = ${CMAKE_PROJECT_NAME}" )
MESSAGE( STATUS "PROJECT_VERSION_MAJOR = ${PROJECT_VERSION_MAJOR}" )
MESSAGE( STATUS "PROJECT_VERSION_MINOR = ${PROJECT_VERSION_MINOR}" )
MESSAGE( STATUS "PROJECT_VERSION_PATCH = ${PROJECT_VERSION_PATCH}" )
MESSAGE( STATUS "PROJECT_VERSION_TWEAK = ${PROJECT_VERSION_TWEAK}" )
MESSAGE( STATUS "PROJECT_HOMEPAGE_URL = ${PROJECT_HOMEPAGE_URL}")
MESSAGE( STATUS "CMAKE_PROJECT_DESCRIPTION = ${CMAKE_PROJECT_DESCRIPTION}" )

SET(THIRD_PART_DIST_DIR "Lib")

SET(DOWNLOAD_BASE_URL "https://eyer-test.oss-cn-beijing.aliyuncs.com/")

SET(IS_THIRD_PART_DIST_DIR "NO")
OPTION(DOWNLOAD_TEST_RES     "option for DOWNLOAD_TEST_RES"     OFF)
IF (DOWNLOAD_TEST_RES)
    SET(IS_THIRD_PART_DIST_DIR "YES")
ENDIF(DOWNLOAD_TEST_RES)

OPTION(ENABLE_EYER_TEST           "option for ENABLE_EYER_TEST"           ON)

IF (CMAKE_SYSTEM_NAME MATCHES "Linux")
    MESSAGE(STATUS "current platform: Linux ")
ELSEIF (CMAKE_SYSTEM_NAME MATCHES "Windows")
    MESSAGE(STATUS "current platform: Windows")
    ADD_DEFINITIONS(-D _CRT_SECURE_NO_WARNINGS)
    ADD_DEFINITIONS(-D NOMINMAX)
ELSEIF (CMAKE_SYSTEM_NAME MATCHES "Android")
    MESSAGE(STATUS "current platform: Android")
    SET(THIRD_PART_DIST_DIR "Lib_android_${CMAKE_ANDROID_ARCH_ABI}")
    MESSAGE(STATUS "${THIRD_PART_DIST_DIR}")
ELSEIF (CMAKE_SYSTEM_NAME MATCHES "Darwin")
    MESSAGE(STATUS "current platform: Darwin")
ELSEIF (CMAKE_SYSTEM_NAME MATCHES "iOS")
    MESSAGE(STATUS "current platform: iOS")
ELSEIF (CMAKE_SYSTEM_NAME MATCHES "Emscripten")
    MESSAGE(STATUS "current platform: Emscripten")
ELSE ()
    MESSAGE(STATUS "other platform: ${CMAKE_SYSTEM_NAME}")
ENDIF (CMAKE_SYSTEM_NAME MATCHES "Linux")

SET(CMAKE_CXX_STANDARD 17)

MESSAGE(STATUS "operation system is ${CMAKE_SYSTEM}")

INCLUDE_DIRECTORIES (googletest/googletest/include)
INCLUDE_DIRECTORIES (EyerGLAD/glad/include/)
INCLUDE_DIRECTORIES (EyerLua/src/)

INCLUDE_DIRECTORIES (${CMAKE_SOURCE_DIR}/../../${THIRD_PART_DIST_DIR}/QtLib/QtGui/)
INCLUDE_DIRECTORIES (${CMAKE_SOURCE_DIR}/../../${THIRD_PART_DIST_DIR}/QtLib/)

INCLUDE_DIRECTORIES (${CMAKE_SOURCE_DIR}/../../${THIRD_PART_DIST_DIR}/glfw_install/include)
INCLUDE_DIRECTORIES (${CMAKE_SOURCE_DIR}/../../${THIRD_PART_DIST_DIR}/curl_install/include)
INCLUDE_DIRECTORIES (${CMAKE_SOURCE_DIR}/../../${THIRD_PART_DIST_DIR}/libxml2_install/include)
INCLUDE_DIRECTORIES (${CMAKE_SOURCE_DIR}/../../${THIRD_PART_DIST_DIR}/libxml2_install/include/libxml2)
INCLUDE_DIRECTORIES (${CMAKE_SOURCE_DIR}/../../${THIRD_PART_DIST_DIR}/libosip2_install/include)
INCLUDE_DIRECTORIES (${CMAKE_SOURCE_DIR}/../../${THIRD_PART_DIST_DIR}/libexosip2_install/include)
INCLUDE_DIRECTORIES (${CMAKE_SOURCE_DIR}/../../${THIRD_PART_DIST_DIR}/pjproject_install/include)
INCLUDE_DIRECTORIES (${CMAKE_SOURCE_DIR}/../../${THIRD_PART_DIST_DIR}/JRTPLIB_install/include)
INCLUDE_DIRECTORIES (${CMAKE_SOURCE_DIR}/../../${THIRD_PART_DIST_DIR}/opencv_install/include/opencv4)
INCLUDE_DIRECTORIES (${CMAKE_SOURCE_DIR}/../../${THIRD_PART_DIST_DIR}/libyuv_install/include)
INCLUDE_DIRECTORIES (${CMAKE_SOURCE_DIR}/../../${THIRD_PART_DIST_DIR}/libpng_install/include)
INCLUDE_DIRECTORIES (${CMAKE_SOURCE_DIR}/../../${THIRD_PART_DIST_DIR}/openssl_install/include)
INCLUDE_DIRECTORIES (${CMAKE_SOURCE_DIR}/../../${THIRD_PART_DIST_DIR}/glfw_install/include)
INCLUDE_DIRECTORIES (${CMAKE_SOURCE_DIR}/../../${THIRD_PART_DIST_DIR}/jsoncpp_install/include)
INCLUDE_DIRECTORIES (${CMAKE_SOURCE_DIR}/../../${THIRD_PART_DIST_DIR}/freetype_install/include)
INCLUDE_DIRECTORIES (${CMAKE_SOURCE_DIR}/../../${THIRD_PART_DIST_DIR}/fdk_aac_install/include/)
INCLUDE_DIRECTORIES (${CMAKE_SOURCE_DIR}/../../${THIRD_PART_DIST_DIR}/freetype_install/include/freetype2)
INCLUDE_DIRECTORIES (${CMAKE_SOURCE_DIR}/../../${THIRD_PART_DIST_DIR}/skia_install/include/core)
INCLUDE_DIRECTORIES (${CMAKE_SOURCE_DIR}/../../${THIRD_PART_DIST_DIR}/skia_install/)
INCLUDE_DIRECTORIES (${CMAKE_SOURCE_DIR}/../../${THIRD_PART_DIST_DIR}/bgfx_install/include/)
INCLUDE_DIRECTORIES (${CMAKE_SOURCE_DIR}/../../${THIRD_PART_DIST_DIR}/ffmpeg_install/include)
INCLUDE_DIRECTORIES (${CMAKE_SOURCE_DIR}/../../${THIRD_PART_DIST_DIR}/libraw_install/include)
INCLUDE_DIRECTORIES (${CMAKE_SOURCE_DIR}/../../${THIRD_PART_DIST_DIR}/rlottie_install/include)
# INCLUDE_DIRECTORIES (${CMAKE_SOURCE_DIR}/../../Lib/ffmpeg-3.3.9_install/include)

LINK_DIRECTORIES (${CMAKE_SOURCE_DIR}/../../${THIRD_PART_DIST_DIR}/libpng_install/lib)
LINK_DIRECTORIES (${CMAKE_SOURCE_DIR}/../../${THIRD_PART_DIST_DIR}/glfw_install/lib)
LINK_DIRECTORIES (${CMAKE_SOURCE_DIR}/../../${THIRD_PART_DIST_DIR}/jsoncpp_install/lib)
LINK_DIRECTORIES (${CMAKE_SOURCE_DIR}/../../${THIRD_PART_DIST_DIR}/freetype_install/lib)
LINK_DIRECTORIES (${CMAKE_SOURCE_DIR}/../../${THIRD_PART_DIST_DIR}/ffmpeg_install/lib)
# LINK_DIRECTORIES (${CMAKE_SOURCE_DIR}/../../${THIRD_PART_DIST_DIR}/ffmpeg-3.3.9_install/lib)
LINK_DIRECTORIES (${CMAKE_SOURCE_DIR}/../../${THIRD_PART_DIST_DIR}/x264_install/lib)
LINK_DIRECTORIES (${CMAKE_SOURCE_DIR}/../../${THIRD_PART_DIST_DIR}/x265_install/lib)
LINK_DIRECTORIES (${CMAKE_SOURCE_DIR}/../../${THIRD_PART_DIST_DIR}/lame_install/lib)
LINK_DIRECTORIES (${CMAKE_SOURCE_DIR}/../../${THIRD_PART_DIST_DIR}/libvpx_install/lib)
LINK_DIRECTORIES (${CMAKE_SOURCE_DIR}/../../${THIRD_PART_DIST_DIR}/libopenh264_install/lib)
LINK_DIRECTORIES (${CMAKE_SOURCE_DIR}/../../${THIRD_PART_DIST_DIR}/fdk_aac_install/lib)
LINK_DIRECTORIES (${CMAKE_SOURCE_DIR}/../../${THIRD_PART_DIST_DIR}/openssl_install/lib)
LINK_DIRECTORIES (${CMAKE_SOURCE_DIR}/../../${THIRD_PART_DIST_DIR}/skia_install/lib)
LINK_DIRECTORIES (${CMAKE_SOURCE_DIR}/../../${THIRD_PART_DIST_DIR}/bgfx_install/lib)
LINK_DIRECTORIES (${CMAKE_SOURCE_DIR}/../../${THIRD_PART_DIST_DIR}/libopus_install/lib)
LINK_DIRECTORIES (${CMAKE_SOURCE_DIR}/../../${THIRD_PART_DIST_DIR}/libraw_install/lib)
LINK_DIRECTORIES (${CMAKE_SOURCE_DIR}/../../${THIRD_PART_DIST_DIR}/opencv_install/lib)
LINK_DIRECTORIES (${CMAKE_SOURCE_DIR}/../../${THIRD_PART_DIST_DIR}/rlottie_install/lib)

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")

OPTION(ENABLE_GCOV "Enable gcov (debug, Linux builds only)" OFF)
IF (ENABLE_GCOV AND NOT WIN32 AND NOT APPLE)
    SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fprofile-arcs -ftest-coverage")
    SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -fprofile-arcs -ftest-coverage")
    SET(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} -fprofile-arcs -ftest-coverage -lgcov")
ENDIF()

IF (CMAKE_SYSTEM_NAME MATCHES "Linux")
    MESSAGE(STATUS "current platform: Linux ")
ELSEIF (CMAKE_SYSTEM_NAME MATCHES "Windows")
    MESSAGE(STATUS "current platform: Windows")
    ADD_DEFINITIONS(-D EYER_PLATFORM_WINDOWS)
    IF(MSVC)
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /utf-8")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /utf-8")
    ENDIF (MSVC)
ELSEIF (CMAKE_SYSTEM_NAME MATCHES "Android")
    MESSAGE(STATUS "current platform: Android")
    ADD_DEFINITIONS(-D EYER_PLATFORM_ANDROID)
ELSEIF (CMAKE_SYSTEM_NAME MATCHES "Darwin")
    MESSAGE(STATUS "current platform: Darwin")
    ADD_DEFINITIONS(-D EYER_PLATFORM_DARWIN)
    set(CMAKE_EXE_LINKER_FLAGS
        "-framework QuartzCore -framework Metal -framework IOKit -framework AudioToolbox -framework CoreGraphics -framework CoreMedia -framework Cocoa -framework VideoToolbox -framework AVFoundation -framework Security -framework CoreFoundation -framework CoreVideo -framework OpenGL -framework AppKit -framework CoreImage -framework VideoDecodeAcceleration"
    )
ELSEIF (CMAKE_SYSTEM_NAME MATCHES "iOS")
    MESSAGE(STATUS "current platform: iOS")
    ADD_DEFINITIONS(-D EYER_PLATFORM_IOS)
ELSEIF (CMAKE_SYSTEM_NAME MATCHES "Emscripten")
    MESSAGE(STATUS "current platform: Emscripten")
    ADD_DEFINITIONS(-D EYER_PLATFORM_EMSCRIPTEN)
ELSE ()
    MESSAGE(STATUS "other platform: ${CMAKE_SYSTEM_NAME}")
ENDIF (CMAKE_SYSTEM_NAME MATCHES "Linux")

ADD_DEFINITIONS(-D EYER_MP4_SYNTAX)

FUNCTION(ModuleOption moduleName moduleOption)
    IF (${moduleOption})
        ADD_SUBDIRECTORY(${moduleName})
    ENDIF(${moduleOption})
ENDFUNCTION(ModuleOption)

FUNCTION(ModuleTestOption moduleName moduleTestName moduleOption)
    IF (${moduleOption})
        ADD_SUBDIRECTORY(${moduleName})
        IF(ENABLE_EYER_TEST)
            ADD_SUBDIRECTORY(${moduleTestName})
        ENDIF(ENABLE_EYER_TEST)
    ENDIF(${moduleOption})
ENDFUNCTION(ModuleTestOption)

IF(MSVC)
    set(CMAKE_CXX_FLAGS_RELEASE "/MT")
    set(CMAKE_CXX_FLAGS_DEBUG "/MTd")
ENDIF(MSVC)

ADD_SUBDIRECTORY(googletest)

# base core
OPTION(EyerThread                   "option for EyerThread"             ON)
ModuleTestOption("EyerThread"       "EyerThreadTest"           EyerThread)

OPTION(EyerCore                   "option for EyerCore"             ON)
ModuleTestOption("EyerCore"       "EyerCoreTest"           EyerCore)